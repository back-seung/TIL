package stackAndQueue;import java.util.Stack;public class StackEx1 {    public static Stack back = new Stack();    public static Stack forward = new Stack();    public static void main(String[] args) {        goURL("1. 네이트");        goURL("2. 다음");        goURL("3. 네이버");        goURL("4. 야후");        printStatus();        goBack();        System.out.println(" '뒤로' 버튼을 누른 후 =");        printStatus();        goBack();        System.out.println(" '뒤로' 버튼을 누른 후 =");        printStatus();        goForward();        System.out.println(" '앞으로' 버튼을 누른 후 =");        printStatus();        goURL("codechobo.com");        System.out.println("새로운 주소로 이동후");        printStatus();    }    // 각 스택을 출력하고 현재 화면을 알려준다, peek()은 객체를 꺼내지 않고 가져온다.    public static void printStatus() {        System.out.println("back : " + back);        System.out.println("forward : " + forward);        System.out.println("현재 화면은 '" + back.peek() + "' 입니다.");        System.out.println();    }    // 주소 이동. back 스택에 추가하고 forward가 비어있지 않다면 내용 전체를 clear()로 비운다.    public static void goURL(String url) {        back.push(url);        if (!forward.empty()) {            forward.clear();        }    }    // 앞으로 가기. forward 스택이 비어있지 않다면 back에 forward의 제일 최근 객체를 꺼내 넣는다.    public static void goForward() {        if (!forward.empty()) {            back.push(forward.pop());        }    }    // 뒤로 가기. back 스택이 비어있지 않다면 forward에 back의 제일 최근 객체를 꺼내 넣는다.    public static void goBack() {        if (!back.empty()) {            forward.push(back.pop());        }    }}